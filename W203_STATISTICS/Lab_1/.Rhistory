}
# function for plotting in the map
mapplot <- function(arrivaldf, departuredf) {
ggmap(map13) +
geom_point(data = arrivaldf,  mapping = aes(x = longitude,
y = latitude,
size = delta), alpha = 0.6, color = "Red") +
geom_point(data = departuredf, mapping = aes(x = longitude,
y = latitude,
size = delta), alpha = 0.6, color = "Blue")
}
for (i in c("Morning", "Afternoon", "Night") ) {
df <- bike %>% filter(time == i)
lstd <- arr.dep.station.finder(df, 50)
print(
mapplot(data.frame(lstd[[1]]), data.frame(lstd[[2]])) +
ggtitle(paste("Popular Bike Stations in the",i)) +
theme(plot.title = element_text(hjust = 0.5, size=18)) +
labs(x=NULL, y=NULL)
)
}
plot.arriving.station.customer <- function(t, i) {
# use i = 1 for arriving stations
# use i = 2 for departing stations
# get both popular arriving stations and departing stations
lstd <- arr.dep.station.finder(bike %>% filter(time == t), 20)
#print(lstd)
# sort and store stations.
sorted_arr_station <- data.frame(lstd[[i]]) %>%
arrange(arrivals) %>%
select(station)
# create df for plotting
plot_df <- bike %>%
filter(end.station.name %in% sorted_arr_station$station) %>%
filter(time == t) %>%
select(end.station.name, usertype)
# set levels on stations with "sorted_arr_station" vector
plot_df$end.station.name <- factor(plot_df$end.station.name,
levels = sorted_arr_station$station)
# plot
p <- ggplot(plot_df, aes(x= end.station.name, fill = factor(usertype)))  +
geom_bar(position="stack", stat = "count") +
coord_flip() +
ggtitle(t) +
theme(plot.title = element_text(hjust = 0.5, size=14)) +
guides(fill=FALSE) +
labs(x=NULL, y=NULL)
return (p)
}
p1 <- plot.arriving.station.customer("Morning", 1)
p2 <- plot.arriving.station.customer("Afternoon", 1)
p3 <- plot.arriving.station.customer("Night", 1)
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1)
plot.arriving.station.customer <- function(t, i) {
# use i = 1 for arriving stations
# use i = 2 for departing stations
# get both popular arriving stations and departing stations
lstd <- arr.dep.station.finder(bike %>% filter(time == t), 20)
#print(lstd)
# sort and store stations.
sorted_arr_station <- data.frame(lstd[[i]]) %>%
arrange(arrivals) %>%
select(station)
# create df for plotting
plot_df <- bike %>%
filter(end.station.name %in% sorted_arr_station$station) %>%
filter(time == t) %>%
select(end.station.name, usertype)
# set levels on stations with "sorted_arr_station" vector
plot_df$end.station.name <- factor(plot_df$end.station.name,
levels = sorted_arr_station$station)
# plot
p <- ggplot(plot_df, aes(x= end.station.name, fill = factor(usertype)))  +
geom_bar(position="stack", stat = "count") +
coord_flip() +
ggtitle(t) +
theme(plot.title = element_text(hjust = 0.5, size=14)) +
guides(fill=FALSE) +
labs(x=NULL, y=NULL)
return (p)
}
p1 <- plot.arriving.station.customer("Morning", 1)
p2 <- plot.arriving.station.customer("Afternoon", 1)
p3 <- plot.arriving.station.customer("Night", 1)
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1)
plot.arriving.station.customer <- function(t, i) {
# use i = 1 for arriving stations
# use i = 2 for departing stations
# get both popular arriving stations and departing stations
lstd <- arr.dep.station.finder(bike %>% filter(time == t), 20)
#print(lstd)
# sort and store stations.
sorted_arr_station <- data.frame(lstd[[i]]) %>%
arrange(arrivals) %>%
select(station)
# create df for plotting
plot_df <- bike %>%
filter(end.station.name %in% sorted_arr_station$station) %>%
filter(time == t) %>%
select(end.station.name, usertype)
# set levels on stations with "sorted_arr_station" vector
plot_df$end.station.name <- factor(plot_df$end.station.name,
levels = sorted_arr_station$station)
# plot
p <- ggplot(plot_df, aes(x= end.station.name, fill = factor(usertype)))  +
geom_bar(position="stack", stat = "count") +
coord_flip() +
ggtitle(t) +
theme(plot.title = element_text(hjust = 0.5, size=14)) +
guides(fill=FALSE) +
labs(x=NULL, y=NULL)
return (p)
}
p1 <- plot.arriving.station.customer("Morning", 1)
p2 <- plot.arriving.station.customer("Afternoon", 1)
p3 <- plot.arriving.station.customer("Night", 1)
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1)
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1,
top = textGrob("Popular Bike Stations with Customer Breakdown",
gp=gpar(fontsize=18)))
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1,
top = textGrob("Popular Arriving Stations with Customer Breakdown",
gp=gpar(fontsize=18)))
p1 <- ggmap(map13) +
geom_point(data = popular_station, mapping = aes(x = longitude, y = latitude, size = total),
alpha = 0.6, color = "Red") +
ggtitle("Popular Bike Stations in the Month") +
theme(plot.title = element_text(hjust = 0.5, size=18)) +
labs(x=NULL, y=NULL)
p2 <- ggmap(map13) +
geom_point(data = popular_station, mapping = aes(x = longitude, y = latitude, size = total),
alpha = 0.6, color = "Red") +
ggtitle("Popular Bike Stations in the Month") +
theme(plot.title = element_text(hjust = 0.5, size=18)) +
labs(x=NULL, y=NULL)
p3 <- ggmap(map13) +
geom_point(data = popular_station, mapping = aes(x = longitude, y = latitude, size = total),
alpha = 0.6, color = "Red") +
ggtitle("Popular Bike Stations in the Month") +
theme(plot.title = element_text(hjust = 0.5, size=18)) +
labs(x=NULL, y=NULL)
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1,
top = textGrob("Popular Arriving Stations with Customer Breakdown",
gp=gpar(fontsize=18)))
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1,
top = textGrob("Popular Arriving Stations with Customer Breakdown",
gp=gpar(fontsize=18)))
combined(bike, 50, "Morning")
combined <- function(datafarme, num_stations, t) {
df <- arr.dep.station.finder(bike %>% filter(time == t), num_stations)
p <- mapplot(data.frame(df[[1]]), data.frame(df[[2]])) +
ggtitle(paste("Popular Bike Stations in the",i)) +
theme(plot.title = element_text(hjust = 0.5, size=18)) +
labs(x=NULL, y=NULL)
return (p)
}
combined(bike, 50, "Morning")
combined <- function(datafarme, num_stations, t) {
df <- arr.dep.station.finder(bike %>% filter(time == t), num_stations)
p <- mapplot(data.frame(df[[1]]), data.frame(df[[2]])) +
ggtitle(paste("Popular Bike Stations in the",i)) +
theme(plot.title = element_text(hjust = 0.5, size=14)) +
labs(x=NULL, y=NULL)
return (p)
}
combined(bike, 50, "Morning")
combined <- function(datafarme, num_stations, t) {
df <- arr.dep.station.finder(bike %>% filter(time == t), num_stations)
p <- mapplot(data.frame(df[[1]]), data.frame(df[[2]])) +
ggtitle(t) +
theme(plot.title = element_text(hjust = 0.5, size=14)) +
labs(x=NULL, y=NULL)
return (p)
}
combined(bike, 50, "Morning")
combined <- function(datafarme, num_stations, t) {
df <- arr.dep.station.finder(bike %>% filter(time == t), num_stations)
p <-   ggmap(map13) +
geom_point(data = data.frame(df[[1]]),  mapping = aes(x = longitude,
y = latitude,
size = delta), alpha = 0.6, color = "Red") +
geom_point(data = data.frame(df[[2]]), mapping = aes(x = longitude,
y = latitude,
size = delta), alpha = 0.6, color = "Blue") +
ggtitle(t) +
theme(plot.title = element_text(hjust = 0.5, size=14)) +
labs(x=NULL, y=NULL)
return (p)
}
p1 <- combined(bike, 50, "Morning")
p2 <- combined(bike, 50, "Morning")
p1
p2
p2 <- combined(bike, 50, "Afternoon")
p2
# function for plotting in the map
map.plot <- function(datafarme, num_stations, t) {
df <- arr.dep.station.finder(bike %>% filter(time == t), num_stations)
p <-   ggmap(map13) +
geom_point(data = data.frame(df[[1]]),  mapping = aes(x = longitude,
y = latitude,
size = delta), alpha = 0.6, color = "Red") +
geom_point(data = data.frame(df[[2]]), mapping = aes(x = longitude,
y = latitude,
size = delta), alpha = 0.6, color = "Blue") +
ggtitle(t) +
theme(plot.title = element_text(hjust = 0.5, size=14)) +
labs(x=NULL, y=NULL)
return (p)
}
p1 <- map.plot(bike, 50, "Morning")
p2 <- map.plot(bike, 50, "Afternoon")
p3 <- map.plot(bike, 50, "Night")
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1,
top = textGrob("Popular Bike Stations",
gp=gpar(fontsize=18)))
p1 <- map.plot(bike, 50, "Morning")
p2 <- map.plot(bike, 50, "Afternoon")
p3 <- map.plot(bike, 50, "Night")
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1,
top = textGrob("Popular Bike Stations",
gp=gpar(fontsize=18)))
get_popular_station <- function(dataframe) {
df1 <- dataframe %>%
group_by(start.station.id, start.station.name, start.station.latitude, start.station.longitude) %>%
summarise(departures = n())
colnames(df1)[1:4] <- c("id", "stationname","latitude", "longitude")
df2 <- dataframe %>%
group_by(end.station.id) %>%
summarise(arrivals = n())
colnames(df2)[1] <- "id"
combined <- right_join(df1, df2, by = "id")
combined <- na.omit(combined)
combined$total <- combined$departures + combined$arrivals
combined <- combined %>%
arrange(desc(total))
combined <- combined[1:100,]
return (combined)
}
popular_station <- get_popular_station(bike)
ggmap(map13) +
geom_point(data = popular_station, mapping = aes(x = longitude, y = latitude, size = total),
alpha = 0.6, color = "Red") +
ggtitle("Popular Bike Stations in the Month") +
theme(plot.title = element_text(hjust = 0.5, size=18)) +
labs(x=NULL, y=NULL)
p1 <- map.plot(bike, 50, "Morning")
p2 <- map.plot(bike, 50, "Afternoon")
p3 <- map.plot(bike, 50, "Night")
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1,
top = textGrob("Popular Bike Stations",
gp=gpar(fontsize=18)))
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1,
top = textGrob("Popular Bike Stations",
gp=gpar(fontsize=18)))
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1,
top = textGrob("Popular Arriving and Departing Bike Stations",
gp=gpar(fontsize=18)))
p1 <- plot.arriving.station.customer("Morning", 1)
p2 <- plot.arriving.station.customer("Afternoon", 1)
p3 <- plot.arriving.station.customer("Night", 1)
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1,
top = textGrob("Popular Arriving Stations with Customer Breakdown",
gp=gpar(fontsize=18)))
p3 <- plot.arriving.station.customer("Night", 1) + theme(legend.position="top")
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1,
top = textGrob("Popular Arriving Stations with Customer Breakdown",
gp=gpar(fontsize=18)))
p4 <- plot.arriving.station.customer("Morning", 2)
p5 <- plot.arriving.station.customer("Afternoon", 2)
p6 <- plot.arriving.station.customer("Night", 2)
grid.arrange(p4, p5, p6, ncol = 3, nrow = 1,
top = textGrob("Popular Departing Stations with Customer Breakdown",
gp=gpar(fontsize=18)))
plot.arriving.station.customer <- function(t, i) {
# use i = 1 for arriving stations
# use i = 2 for departing stations
# get both popular arriving stations and departing stations
lstd <- arr.dep.station.finder(bike %>% filter(time == t), 20)
#print(lstd)
# sort and store stations.
sorted_arr_station <- data.frame(lstd[[i]]) %>%
arrange(arrivals) %>%
select(station)
# create df for plotting
plot_df <- bike %>%
filter(end.station.name %in% sorted_arr_station$station) %>%
filter(time == t) %>%
select(end.station.name, usertype)
# set levels on stations with "sorted_arr_station" vector
plot_df$end.station.name <- factor(plot_df$end.station.name,
levels = sorted_arr_station$station)
# plot
p <- ggplot(plot_df, aes(x= end.station.name, fill = factor(usertype)))  +
geom_bar(position="stack", stat = "count") +
coord_flip() +
ggtitle(t) +
theme(plot.title = element_text(hjust = 0.5, size=14)) +
guides(fill=FALSE) +
labs(x=NULL, y=NULL)
return (p)
}
p1 <- plot.arriving.station.customer("Morning", 1)
p2 <- plot.arriving.station.customer("Afternoon", 1)
p3 <- plot.arriving.station.customer("Night", 1)
grid.arrange(p1, p2, p3, ncol = 3, nrow = 1,
top = textGrob("Popular Arriving Stations with Customer Breakdown",
gp=gpar(fontsize=18)))
p4 <- plot.arriving.station.customer("Morning", 2)
p5 <- plot.arriving.station.customer("Afternoon", 2)
p6 <- plot.arriving.station.customer("Night", 2)
grid.arrange(p4, p5, p6, ncol = 3, nrow = 1,
top = textGrob("Popular Departing Stations with Customer Breakdown",
gp=gpar(fontsize=18)))
bike <- read.csv("201607-citibike-tripdata.csv")
setwd("C:/Users/K/Documents/GitHub/NYC Bike")
knitr::opts_chunk$set(echo = TRUE)
#closeAllConnections()
#rm(list=ls())
library(ggplot2)
library(dplyr)
library(lubridate)
library(ggmap)
library(grid)
library(gridExtra)
library(tidyr)
setwd("C:/Users/K/Documents/GitHub/NYC Bike")
bike <- read.csv("201607citibiketripdata.csv")
str(bike)
unique(bike$bikeid)
length(unique(bike$bikeid))
# function for finding pouplar stations for departure and arrival
arr.dep.station.finder <- function(dataframe, num_stations) {
df1 <- dataframe %>%
group_by(start.station.id, start.station.name, start.station.latitude, start.station.longitude) %>%
summarise(departures = n())
colnames(df1)[1:4] <- c("id", "station","latitude", "longitude")
df2 <- dataframe %>%
group_by(end.station.id) %>%
summarise(arrivals = n())
colnames(df2)[1] <- "id"
combined <- right_join(df1, df2, by = "id")
combined$delta <- combined$departures - combined$arrivals
attach(combined)
arrivalStation <- combined[order(delta),][1:num_stations,]
departureStation <- combined[order(-delta),][1:num_stations,]
detach(combined)
arrivalStation$delta <- abs(arrivalStation$delta)
result <- list(arrivalStation, departureStation)
return (result)
}
# function for plotting in the map
map.plot <- function(datafarme, num_stations, t) {
df <- arr.dep.station.finder(bike %>% filter(time == t), num_stations)
p <-   ggmap(map13) +
geom_point(data = data.frame(df[[1]]),  mapping = aes(x = longitude,
y = latitude,
size = delta), alpha = 0.6, color = "Red") +
geom_point(data = data.frame(df[[2]]), mapping = aes(x = longitude,
y = latitude,
size = delta), alpha = 0.6, color = "Blue") +
ggtitle(t) +
theme(plot.title = element_text(hjust = 0.5, size=14)) +
labs(x=NULL, y=NULL)
return (p)
}
map.plot(bike, 50, "Morning")
load(ceo_w203.RData)
getwd
getwd()
setwd("C:/Users/K/Desktop/Berkeley/00_Academics/01_2017 Summer/W203 STATs/Lab_1")
load(ceo_w203.RData)
getwd()
setwd("C:/Users/K/Desktop/Berkeley/00_Academics/01_2017 Summer/W203 STATs/Lab_1")
load(ceo_w203.RData)
load("ceo_w203.RData")
objects
object()
objects()
closeAllConnections()
rm(list=ls())
objects()
load("ceo_w203.RData")
objects()
knitr::opts_chunk$set(echo = TRUE)
#closeAllConnections()
#rm(list=ls())
setwd("C:/Users/K/Desktop/Berkeley/00_Academics/01_2017 Summer/W203 STATs/Lab_1")
load("ceo_w203.RData")
# confirm CEO data is loaded
objects()
describe(CEO)
summary(CEO)
library(car)
library(car)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(tidyr)
scatterplotMatrix(~ salary + age + college + grad + comten + ceoten + profits + mktval,
data = Fert, diagonal = "histogram")
scatterplotMatrix(~ salary + age + college + grad + comten + ceoten + profits + mktval,
data = CEO, diagonal = "histogram")
```{r, warning=FALSE, error=FALSE}
scatterplotMatrix(~ salary + age + college + grad + comten + ceoten + profits + mktval,
data = CEO, diagonal = "histogram")
col_names <- names(CEO)
col_names
col_names <- names(CEO)
for (i in col_names) {
ggplot(data, aes_string(x = i)) +
+ geom_histogram()
}
for (i in col_names) {
ggplot(data, aes_string(x = i)) +
geom_histogram()
}
for (i in col_names) {
p1 <- ggplot(data, aes_string(x = i)) +
geom_histogram()
plot(p1)
}
for (i in col_names) {
p1 <- ggplot(CEO, aes_string(x = i)) +
geom_histogram()
plot(p1)
}
for (i in col_names) {
p1 <- ggplot(CEO, aes_string(x = i)) +
geom_histogram(bins=50)
plot(p1)
}
scatterplotMatrix(~ salary + age + comten + ceoten + profits + mktval,
data = CEO, diagonal = "histogram")
col_names <- names(CEO)
col_names <- col_names[! col_names %in% "mktval"]
for (i in col_names) {
plt1 <-  ggplot(CEO, aes_string(x = i, fill = "mktval")) +
geom_bar(position = "fill")
plot(plt1)
}
for (i in col_names) {
plt1 <-  ggplot(CEO, aes_string(x = i, y = "mktval")) +
geom_point()
plot(plt1)
}
for (i in col_names) {
plt1 <-  ggplot(CEO, aes_string(x = i, y = "mktval")) +
geom_point() +
geom_smooth()
plot(plt1)
}
library(reshape2)
ggplot(data = melt(CEO), aes(x=variable, y=value)) +
geom_boxplot(aes(fill=variable))
CEO_r <- melt(CEO) %>%
filter(variable != mktval)
CEO_r <- melt(CEO) %>%
filter(variable != "mktval")
CEO_r
ggplot(data = CEO_r, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=variable))
for (i in col_names) {
p1 <- ggplot(CEO, aes_string(x = i)) +
geom_boxplot()
plot(p1)
}
for (i in col_names) {
df = melt(CEO) %>% filter(i)
p1 <- ggplot(data = df, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=variable))
plot(p1)
}
col_names
col_names[1]
melt(CEO)$variable == col_names[1]
for (i in col_names) {
df <- melt(CEO)
vec_col <- df$variable == i
df <- df[vec_col]
p1 <- ggplot(data = df, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=variable))
plot(p1)
}
for (i in col_names) {
df <- melt(CEO)
vec_col <- df$variable == i
df <- df[vec_col,]
p1 <- ggplot(data = df, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=variable))
plot(p1)
}
?geom_smooth
col_names <- names(CEO)
col_names <- col_names[! col_names %in% "mktval"]
for (i in col_names) {
plt1 <-  ggplot(CEO, aes_string(x = i, y = "mktval")) +
geom_point() +
geom_smooth(method = lm) ## Add linear regression line with by deafult 95% confidence region
plot(plt1)
}
col_names <- names(CEO)
for (i in col_names) {
df <- melt(CEO)
vec_col <- df$variable == i
df <- df[vec_col,]
p1 <- ggplot(data = df, aes(x=variable, y=value)) +
geom_boxplot(aes(fill=variable))
plot(p1)
}
nrows(CEO)
nrow(CEO)
